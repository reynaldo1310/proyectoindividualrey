{"mappings":"AAAA,kEAAkE;AAClE,IAAI,WAAW,EAAE;AAEjB,SAAS,UAAU,OAAO,EAAE,IAAI;IAC5B,MAAM,WAAW,SAAS,cAAc,CAAC;IACzC,SAAS,WAAW,GAAG;IACvB,SAAS,SAAS,GAAG,CAAC,MAAM,EAAE,MAAM;IACpC,SAAS,KAAK,CAAC,OAAO,GAAG;IACzB,WAAW,IAAM,SAAS,KAAK,CAAC,OAAO,GAAG,QAAQ;AACtD;AAEA,kCAAkC;AAClC,SAAS;IACL,MAAM,KAAK,SAAS,cAAc,CAAC,aAAa,KAAK,CAAC,IAAI;IAC1D,MAAM,OAAO,SAAS,cAAc,CAAC,eAAe,KAAK,CAAC,IAAI;IAC9D,MAAM,QAAQ,WAAW,SAAS,cAAc,CAAC,gBAAgB,KAAK,CAAC,IAAI;IAC3E,MAAM,QAAQ,SAAS,SAAS,cAAc,CAAC,gBAAgB,KAAK,CAAC,IAAI;IAEzE,IAAI,CAAC,MAAM,CAAC,QAAQ,MAAM,UAAU,MAAM,QAAQ;QAC9C,UAAU,sDAAsD;QAChE;IACJ;IAEA,MAAM,kBAAkB,SAAS,IAAI,CAAC,CAAA,UAAW,QAAQ,EAAE,KAAK;IAChE,IAAI,iBAAiB;QACjB,UAAU,sCAAsC;QAChD;IACJ;IAEA,MAAM,aAAa;QACf;QACA;QACA;QACA;IACJ;IAEA,SAAS,IAAI,CAAC;IACd;IACA,UAAU,qCAAkC;IAC5C;AACJ;AAEA,gDAAgD;AAChD,SAAS;IACL,MAAM,YAAY,SAAS,aAAa,CAAC;IACzC,UAAU,SAAS,GAAG,IAAI,qBAAqB;IAE/C,SAAS,OAAO,CAAC,CAAA;QACb,MAAM,MAAM,SAAS,aAAa,CAAC;QACnC,IAAI,SAAS,GAAG,CAAC;gBACT,EAAE,QAAQ,EAAE,CAAC;gBACb,EAAE,QAAQ,IAAI,CAAC;AAC/B,wBAAiB,EAAE,QAAQ,KAAK,CAAC,OAAO,CAAC,GAAG;gBAC5B,EAAE,QAAQ,KAAK,CAAC;;gDAEgB,EAAE,QAAQ,EAAE,CAAC;gDACb,EAAE,QAAQ,EAAE,CAAC;;QAErD,CAAC;QACD,UAAU,WAAW,CAAC;IAC1B;AACJ;AAEA,wDAAwD;AACxD,SAAS,cAAc,SAAS;IAC5B,MAAM,UAAU,SAAS,IAAI,CAAC,CAAA,UAAW,QAAQ,EAAE,KAAK;IAExD,MAAM,WAAW,OAAO,CAAC,sBAAsB,EAAE,QAAQ,IAAI,CAAC,CAAC,CAAC,EAAE,QAAQ,KAAK;IAC/E,MAAM,WAAW,OAAO,CAAC,uBAAuB,EAAE,QAAQ,IAAI,CAAC,CAAC,CAAC,EAAE,QAAQ,KAAK;IAEhF,IAAI,aAAa,QAAQ,CAAC,MAAM,WAC5B,QAAQ,KAAK,GAAG,SAAS;IAE7B,IAAI,aAAa,QAAQ,CAAC,MAAM,WAC5B,QAAQ,KAAK,GAAG,WAAW;IAG/B;IACA,UAAU,uCAAuC;AACrD;AAEA,oCAAoC;AACpC,SAAS,cAAc,SAAS;IAC5B,MAAM,eAAe,SAAS,SAAS,CAAC,CAAA,UAAW,QAAQ,EAAE,KAAK;IAClE,IAAI,eAAe,IAAI;QACnB,SAAS,MAAM,CAAC,cAAc;QAC9B;QACA,UAAU,qCAAqC;IACnD;AACJ;AAEA,qBAAqB;AACrB,SAAS;IACL,SAAS,cAAc,CAAC,aAAa,KAAK,GAAG;IAC7C,SAAS,cAAc,CAAC,eAAe,KAAK,GAAG;IAC/C,SAAS,cAAc,CAAC,gBAAgB,KAAK,GAAG;IAChD,SAAS,cAAc,CAAC,gBAAgB,KAAK,GAAG;AACpD","sources":["src/javascript/index.js"],"sourcesContent":["// Almacenamiento de productos (simulando una base de datos local)\nlet products = [];\n\nfunction showAlert(message, type) {\n    const alertBox = document.getElementById('alertMessage');\n    alertBox.textContent = message;\n    alertBox.className = `alert ${type}`;\n    alertBox.style.display = 'block';\n    setTimeout(() => alertBox.style.display = 'none', 3000);\n}\n\n// Función para añadir un producto\nfunction addProduct() {\n    const id = document.getElementById('productId').value.trim();\n    const name = document.getElementById('productName').value.trim();\n    const price = parseFloat(document.getElementById('productPrice').value.trim());\n    const stock = parseInt(document.getElementById('productStock').value.trim());\n\n    if (!id || !name || isNaN(price) || isNaN(stock)) {\n        showAlert('Por favor, rellene todos los campos correctamente.', 'error');\n        return;\n    }\n\n    const existingProduct = products.find(product => product.id === id);\n    if (existingProduct) {\n        showAlert('El producto con este ID ya existe.', 'error');\n        return;\n    }\n\n    const newProduct = {\n        id,\n        name,\n        price,\n        stock\n    };\n\n    products.push(newProduct);\n    updateProductTable();\n    showAlert('Producto añadido exitosamente.', 'success');\n    clearForm();\n}\n\n// Función para actualizar la tabla de productos\nfunction updateProductTable() {\n    const tableBody = document.querySelector('#productTable tbody');\n    tableBody.innerHTML = ''; // Limpiamos la tabla\n\n    products.forEach(product => {\n        const row = document.createElement('tr');\n        row.innerHTML = `\n            <td>${product.id}</td>\n            <td>${product.name}</td>\n            <td>€${product.price.toFixed(2)}</td>\n            <td>${product.stock}</td>\n            <td>\n                <button onclick=\"updateProduct('${product.id}')\">Actualizar</button>\n                <button onclick=\"deleteProduct('${product.id}')\">Eliminar</button>\n            </td>\n        `;\n        tableBody.appendChild(row);\n    });\n}\n\n// Función para actualizar stock o precio de un producto\nfunction updateProduct(productId) {\n    const product = products.find(product => product.id === productId);\n\n    const newStock = prompt(`Actualizar stock para ${product.name}:`, product.stock);\n    const newPrice = prompt(`Actualizar precio para ${product.name}:`, product.price);\n\n    if (newStock !== null && !isNaN(newStock)) {\n        product.stock = parseInt(newStock);\n    }\n    if (newPrice !== null && !isNaN(newPrice)) {\n        product.price = parseFloat(newPrice);\n    }\n\n    updateProductTable();\n    showAlert('Producto actualizado correctamente.', 'success');\n}\n\n// Función para eliminar un producto\nfunction deleteProduct(productId) {\n    const productIndex = products.findIndex(product => product.id === productId);\n    if (productIndex > -1) {\n        products.splice(productIndex, 1);\n        updateProductTable();\n        showAlert('Producto eliminado correctamente.', 'success');\n    }\n}\n\n// Limpiar formulario\nfunction clearForm() {\n    document.getElementById('productId').value = '';\n    document.getElementById('productName').value = '';\n    document.getElementById('productPrice').value = '';\n    document.getElementById('productStock').value = '';\n}\n"],"names":[],"version":3,"file":"index.005eec76.js.map","sourceRoot":"/__parcel_source_root/"}